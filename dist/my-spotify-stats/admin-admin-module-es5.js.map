{"version":3,"sources":["webpack:///src/app/admin/admin.module.ts","webpack:///src/app/admin/components/dashboard/dashboard.component.ts","webpack:///src/app/admin/components/dashboard/dashboard.component.html","webpack:///src/app/admin/components/login/login.component.ts","webpack:///src/app/admin/components/login/login.component.html","webpack:///src/app/shared/models/user-model.service.ts","webpack:///src/app/shared/services/user.service.ts"],"names":["routes","path","component","AdminModule","forChild","declarations","imports","exports","DashboardComponent","storageService","userService","user","locationHash","split","slice","join","getUser","then","document","location","href","indexOf","accessToken","getAccessTokenFromUrl","hash","setLocalStorageItem","selector","templateUrl","styleUrls","LoginComponent","auth","logo","route","window","logIn","onClick","UserModelService","http","spotifyUrl","response","id","name","display_name","email","image","images","url","country","followers","total","uri","get","headers","Authorization","getLocalStorageItem","toPromise","res","fromPayload","providedIn","UserService","userModel"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAMA,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,EAErB;AAAED,UAAI,EAAE,WAAR;AAAqBC,eAAS,EAAE;AAAhC,KAFqB,CAAvB;;QAiBaC,W;;;;;YAAAA;;;;yBAAAA,W;AAAW,O;AAAA,gBAPb,CACP,4DADO,EAEP,6DAAaC,QAAb,CAAsBJ,MAAtB,CAFO,EAGP,iEAHO,CAOa,EAFZ,4DAEY;;;;0HAAXG,W,EAAW;AAAA,uBAVpB,gFAUoB,EATpB,4FASoB;AATF,kBAGlB,4DAHkB,EAGN,4DAHM,EAKlB,iEALkB,CASE;AAJR,kBAEJ,4DAFI;AAIQ,O;AAFA,K;;;;;sEAEXA,W,EAAW;cAZvB,sDAYuB;eAZd;AACRE,sBAAY,EAAE,CACZ,gFADY,EAEZ,4FAFY,CADN;AAKRC,iBAAO,EAAE,CACP,4DADO,EAEP,6DAAaF,QAAb,CAAsBJ,MAAtB,CAFO,EAGP,iEAHO,CALD;AAURO,iBAAO,EAAE,CAAC,4DAAD;AAVD,S;AAYc,Q;;;;;;;;;;;;;;;;;;ACzBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,kB;;;AAGX,kCAAoBC,cAApB,EAA4DC,WAA5D,EAAsF;AAAA;;AAAlE,aAAAD,cAAA,GAAAA,cAAA;AAAwC,aAAAC,WAAA,GAAAA,WAAA;AAF5D,aAAAC,IAAA,GAAa,IAAI,gEAAJ,EAAb;AAEyF;AAEzF;;;;;;;;8CAIsBC,Y,EAAoB;AACxC,iBAAOA,YAAY,CAACC,KAAb,CAAmB,EAAnB,EAAuBC,KAAvB,CAA6B,EAA7B,EAAiCA,KAAjC,CAAuC,CAAvC,EAA0C,CAAC,EAA3C,EAA+CC,IAA/C,CAAoD,EAApD,CAAP;AACD;AAED;;;;;;mCAGQ;AAAA;;AACN,eAAKL,WAAL,CAAiBM,OAAjB,GAA2BC,IAA3B,CAAgC,UAAAN,IAAI;AAAA,mBAAI,KAAI,CAACA,IAAL,GAAYA,IAAhB;AAAA,WAApC;;AACA,cAAIO,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAuBC,OAAvB,CAA+B,GAA/B,IAAsC,CAAC,CAA3C,EAA8C;AAC5C,gBAAMC,WAAW,GAAG,KAAKC,qBAAL,CAA2BJ,QAAQ,CAACK,IAApC,CAApB;AACA,iBAAKf,cAAL,CAAoBgB,mBAApB,CAAwC,cAAxC,EAAwDH,WAAxD;AACAJ,oBAAQ,CAACC,QAAT,CAAkBC,IAAlB,GAAyB,YAAzB;AACD;AACF;;;;;;;uBAvBUZ,kB,EAAkB,gJ,EAAA,iJ;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,e;AAAA,a;AAAA,wV;AAAA;AAAA;ACV/B;;AACE;;AACE;;AAAI;;AAAsB;;AAC1B;;AACE;;AACE;;AAAyC;;AAAU;;AACnD;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAyC;;AAAW;;AACpD;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAyC;;AAAe;;AACxD;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AAtBQ;;AAAA;;;;;;;;;sEDQKA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTkB,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEV/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaC,c;;;AAGX,8BAAoBC,IAApB,EAA4C;AAAA;;AAAxB,aAAAA,IAAA,GAAAA,IAAA;AAFpB,aAAAC,IAAA,aAAkB,qEAAYC,KAA9B;AAE+C;AAE/C;;;;;;;kCAGO;AACLC,gBAAM,CAACd,QAAP,CAAgBC,IAAhB,GAAuB,KAAKU,IAAL,CAAUI,KAAV,EAAvB;AACD;AAED;;;;;;mCAGQ,CACP;;;;;;;uBAhBUL,c,EAAc,mJ;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,c;AAAA,a;AAAA,kH;AAAA;AAAA;ACT3B;;AACE;;AACE;;AACA;;AAAG;;AAA0F;;AAC7F;;AAAsB;AAAA,mBAAS,IAAAM,OAAA,EAAT;AAAkB,WAAlB;;AAAoB;;AAAK;;AACjD;;AACF;;;;AAJ6B;;AAAA;;;;;;;;sEDOhBN,c,EAAc;cAL1B,uDAK0B;eALhB;AACTH,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;AET3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaQ,gB;;;AAGX,gCAAoB3B,cAApB,EAA4D4B,IAA5D,EAA8E;AAAA;;AAA1D,aAAA5B,cAAA,GAAAA,cAAA;AAAwC,aAAA4B,IAAA,GAAAA,IAAA;AAFpD,aAAAC,UAAA,GAAa,+BAAb;AAEwE;;;;oCAE5DC,Q,EAAa;AAC/B,cAAM5B,IAAI,GAAG,IAAI,kDAAJ,EAAb;AACAA,cAAI,CAAC6B,EAAL,GAAUD,QAAQ,CAACC,EAAnB;AACA7B,cAAI,CAAC8B,IAAL,GAAYF,QAAQ,CAACG,YAArB;AACA/B,cAAI,CAACgC,KAAL,GAAaJ,QAAQ,CAACI,KAAtB;AACAhC,cAAI,CAACiC,KAAL,GAAaL,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmBC,GAAhC;AACAnC,cAAI,CAACoC,OAAL,GAAeR,QAAQ,CAACQ,OAAxB;AACApC,cAAI,CAACqC,SAAL,GAAiBT,QAAQ,CAACU,KAA1B;AACAtC,cAAI,CAACuC,GAAL,GAAWX,QAAQ,CAACW,GAApB;AAEA,iBAAOvC,IAAP;AACD;;;kCAEM;AAAA;;AACL,iBAAO,KAAK0B,IAAL,CAAUc,GAAV,WAAiB,KAAKb,UAAtB,GAAoC;AACzCc,mBAAO,EAAE;AACPC,2BAAa,EAAE,YAAa,KAAK5C,cAAL,CAAoB6C,mBAApB;AADrB;AADgC,WAApC,EAIJC,SAJI,GAIQtC,IAJR,CAIa,UAAAuC,GAAG,EAAI;AACzB,mBAAO,MAAI,CAACC,WAAL,CAAiBD,GAAjB,CAAP;AACD,WANM,CAAP;AAOD;;;;;;;uBA1BUpB,gB,EAAgB,gI,EAAA,uH;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAFf;;;;;sEAEDA,gB,EAAgB;cAH5B,wDAG4B;eAHjB;AACVsB,oBAAU,EAAE;AADF,S;AAGiB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACR7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,W;;;AAEX,2BAAoBC,SAApB,EAAiD;AAAA;;AAA7B,aAAAA,SAAA,GAAAA,SAAA;AAAgC;;;;kCAE7C;AACL,iBAAO,KAAKA,SAAL,CAAe5C,OAAf,EAAP;AACD;;;;;;;uBANU2C,W,EAAW,mI;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVD,oBAAU,EAAE;AADF,S;AAGY,Q","file":"admin-admin-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { SharedModule } from 'Shared/shared.module';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent},\n  { path: 'dashboard', component: DashboardComponent }\n];\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    DashboardComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  exports: [RouterModule]\n})\nexport class AdminModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { StorageService } from '../../../shared/services/storage.service';\nimport { UserService } from 'src/app/shared/services/user.service';\nimport { User } from 'src/app/shared/classes/user';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  user: User = new User();\n\n  constructor(private storageService: StorageService, private userService: UserService) { }\n\n  /**\n   * gets tokens from url\n   * @param locationHash - location hash key\n   */\n  getAccessTokenFromUrl(locationHash: string): string {\n    return locationHash.split('').slice(14).slice(0, -34).join('');\n  }\n\n  /**\n   * On init\n   */\n  ngOnInit(): void {\n    this.userService.getUser().then(user => this.user = user);\n    if (document.location.href.indexOf('#') > -1) {\n      const accessToken = this.getAccessTokenFromUrl(location.hash);\n      this.storageService.setLocalStorageItem('access-token', accessToken);\n      document.location.href = '/dashboard';\n    }\n  }\n\n}\n","<div class=\"dashboard\">\n  <div class=\"dashboard__content-box\">\n    <h1>Welcome, {{user.name}}</h1>\n    <div class=\"dashboard__grid\">\n      <a class=\"dashboard__grid-item\" routerLink=\"/top-tracks\">\n        <div class=\"dashboard__grid-item-header\">Top Tracks</div>\n        <div class=\"dashboard__grid-item-description\">\n          View your most listened tracks and switch between 3 different time periods. Your data is updated approximately everyday.\n        </div>\n      </a>\n      <a class=\"dashboard__grid-item\" routerLink=\"/top-artists\">\n        <div class=\"dashboard__grid-item-header\">Top Artists</div>\n        <div class=\"dashboard__grid-item-description\">\n          View your most listened Artists and switch between 3 different time periods. Your data is updated approximately everyday.\n        </div>\n      </a>\n      <a class=\"dashboard__grid-item\" routerLink=\"/recently-played\">\n        <div class=\"dashboard__grid-item-header\">Recently Played</div>\n        <div class=\"dashboard__grid-item-description\">\n          Check out your recently played tracks with timestamps.\n        </div>\n      </a>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthoriseService } from 'Shared/services/authorise.service';\nimport { environment } from 'Environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  logo: string = `${environment.route}assets/img/spotifytool.png`;\n\n  constructor(private auth: AuthoriseService) { }\n\n  /**\n   * on click\n   */\n  onClick(): void {\n    window.location.href = this.auth.logIn();\n  }\n\n  /**\n   * On onit\n   */\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"login\">\n  <div class=\"login__container\">\n    <img class=\"login__logo\" [src]=\"logo\">\n    <p>Log in with your Spotify account to gain access to many useful tools for your music needs.</p>\n    <a class=\"login__cta\" (click)=\"onClick()\">Login</a>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { StorageService } from '../services/storage.service';\nimport { User } from '../classes/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserModelService {\n  private spotifyUrl = 'https://api.spotify.com/v1/me';\n\n  constructor(private storageService: StorageService, private http: HttpClient) {}\n\n  private fromPayload(response: any): User {\n    const user = new User();\n    user.id = response.id;\n    user.name = response.display_name;\n    user.email = response.email;\n    user.image = response.images[0].url;\n    user.country = response.country;\n    user.followers = response.total;\n    user.uri = response.uri;\n    \n    return user;\n  }\n\n  getUser(): Promise<any> {\n    return this.http.get(`${this.spotifyUrl}`, {\n      headers: {\n        Authorization: `Bearer ` +  this.storageService.getLocalStorageItem()\n      }\n    }).toPromise().then(res => {\n      return this.fromPayload(res);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserModelService } from '../models/user-model.service';\nimport { User } from '../classes/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private userModel: UserModelService) { }\n\n  getUser(): Promise<User> {\n    return this.userModel.getUser();\n  }\n}\n"]}