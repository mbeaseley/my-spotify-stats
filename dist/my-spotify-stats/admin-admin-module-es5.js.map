{"version":3,"sources":["webpack:///src/app/admin/admin.module.ts","webpack:///src/app/admin/components/dashboard/dashboard.component.ts","webpack:///src/app/admin/components/dashboard/dashboard.component.html","webpack:///src/app/admin/components/login/login.component.ts","webpack:///src/app/admin/components/login/login.component.html","webpack:///src/app/shared/models/authorise-model.service.ts","webpack:///src/app/shared/services/authorise.service.ts"],"names":["routes","path","component","AdminModule","forChild","declarations","imports","exports","DashboardComponent","storageService","locationHash","split","slice","join","document","location","href","indexOf","accessToken","getAccessTokenFromUrl","hash","setLocalStorageItem","selector","templateUrl","styleUrls","LoginComponent","auth","window","signIn","onClick","AuthoriseModelService","scopes","authEndpoint","clientId","redirectUri","encodeURIComponent","providedIn","AuthoriseService","authModelService"],"mappings":"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","file":"admin-admin-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { SharedModule } from 'Shared/shared.module';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent},\n  { path: 'dashboard', component: DashboardComponent }\n];\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    DashboardComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  exports: [RouterModule]\n})\nexport class AdminModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { StorageService } from 'Shared/services/storage.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(private storageService: StorageService) { }\n\n  /**\n   * gets tokens from url\n   * @param locationHash - location hash key\n   */\n  getAccessTokenFromUrl(locationHash: string): string {\n    return locationHash.split('').slice(14).slice(0, -34).join('');\n  }\n\n  /**\n   * On init\n   */\n  ngOnInit(): void {\n    if (document.location.href.indexOf('#') > -1) {\n      const accessToken = this.getAccessTokenFromUrl(location.hash);\n      this.storageService.setLocalStorageItem('access-token', accessToken)\n      document.location.href = '/dashboard';\n    }\n  }\n\n}\n","<div class=\"dashboard\">\n  <div class=\"dashboard__content-box\">\n    <a routerLink=\"/top-tracks\">Top Tracks</a>\n    <a routerLink=\"/top-artists\">Top Artists</a>\n    <a routerLink=\"/recently-played\">Recently Played</a>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthoriseService } from 'Shared/services/authorise.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private auth: AuthoriseService) { }\n\n  /**\n   * on click\n   */\n  onClick(): void {\n    window.location.href = this.auth.signIn();\n  }\n\n  /**\n   * On onit\n   */\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"login\">\n  <div class=\"login__container\">\n    <img class=\"login__logo\" src=\"/assets/img/spotifytool.png\">\n    <p>Log in with your Spotify account to gain access to many useful tools for your music needs.</p>\n    <a class=\"login__cta\" (click)=\"onClick()\">Login</a>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthoriseModelService {\n  private clientId: string;\n  private redirectUri: string;\n  private scopes: any = [\n    'user-read-private',\n    'user-read-email',\n    'playlist-read-private',\n    'playlist-modify-public',\n    'playlist-modify-private',\n    'user-library-read',\n    'user-library-modify',\n    'user-follow-read',\n    'user-follow-modify',\n    'user-top-read',\n    'user-read-recently-played'\n  ];\n  private authEndpoint = 'https://accounts.spotify.com/authorize';\n\n\n  constructor() {\n    this.clientId = 'c4e731729dd1416cb79d243310c9e4e5';\n    this.redirectUri = `${location.href}dashboard`;\n   }\n\n   /**\n    * returns string for url call\n    */\n  signIn(): string {\n    return this.authEndpoint + '?client_id=' + this.clientId + '&redirect_uri='\n      + encodeURIComponent(this.redirectUri) + '&scope='\n      + encodeURIComponent(this.scopes.join('%20'))\n      + '&response_type=token';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthoriseModelService } from 'Shared/models/authorise-model.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthoriseService {\n\n  constructor(private authModelService: AuthoriseModelService) {}\n\n  signIn(): string {\n    return this.authModelService.signIn();\n  }\n}\n"]}